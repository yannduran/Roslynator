// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

namespace Roslynator.CSharp.Refactorings
{
    public static class RefactoringIdentifiers
    {
        public const string AddBooleanComparison = "AddBooleanComparison";
        public const string AddBraces = "AddBraces";
        public const string AddBracesToIfElse = "AddBracesToIfElse";
        public const string AddBracesToSwitchSection = "AddBracesToSwitchSection";
        public const string AddBracesToSwitchSections = "AddBracesToSwitchSections";
        public const string AddCastExpression = "AddCastExpression";
        public const string AddConfigureAwait = "AddConfigureAwait";
        public const string AddDefaultValueToParameter = "AddDefaultValueToParameter";
        public const string AddDefaultValueToReturnStatement = "AddDefaultValueToReturnStatement";
        public const string AddIdentifierToVariableDeclaration = "AddIdentifierToVariableDeclaration";
        public const string AddParameterNameToArgument = "AddParameterNameToArgument";
        public const string AddParameterNameToParameter = "AddParameterNameToParameter";
        public const string AddToMethodInvocation = "AddToMethodInvocation";
        public const string AddUsingDirective = "AddUsingDirective";
        public const string AddUsingStaticDirective = "AddUsingStaticDirective";
        public const string ChangeExplicitTypeToVar = "ChangeExplicitTypeToVar";
        public const string ChangeMemberTypeAccordingToReturnExpression = "ChangeMemberTypeAccordingToReturnExpression";
        public const string ChangeMemberTypeAccordingToYieldReturnExpression = "ChangeMemberTypeAccordingToYieldReturnExpression";
        public const string ChangeMethodReturnTypeToVoid = "ChangeMethodReturnTypeToVoid";
        public const string ChangeTypeAccordingToExpression = "ChangeTypeAccordingToExpression";
        public const string ChangeVarToExplicitType = "ChangeVarToExplicitType";
        public const string CheckParameterForNull = "CheckParameterForNull";
        public const string CollapseToInitializer = "CollapseToInitializer";
        public const string CommentOutMember = "CommentOutMember";
        public const string CommentOutStatement = "CommentOutStatement";
        public const string CreateConditionFromBooleanExpression = "CreateConditionFromBooleanExpression";
        public const string DuplicateArgument = "DuplicateArgument";
        public const string DuplicateMember = "DuplicateMember";
        public const string DuplicateParameter = "DuplicateParameter";
        public const string DuplicateStatement = "DuplicateStatement";
        public const string ExpandAssignmentExpression = "ExpandAssignmentExpression";
        public const string ExpandCoalesceExpression = "ExpandCoalesceExpression";
        public const string ExpandEvent = "ExpandEvent";
        public const string ExpandExpressionBodiedMember = "ExpandExpressionBodiedMember";
        public const string ExpandInitializer = "ExpandInitializer";
        public const string ExpandLambdaExpressionBody = "ExpandLambdaExpressionBody";
        public const string ExpandProperty = "ExpandProperty";
        public const string ExpandPropertyAndAddBackingField = "ExpandPropertyAndAddBackingField";
        public const string ExtractDeclarationFromUsingStatement = "ExtractDeclarationFromUsingStatement";
        public const string ExtractExpressionFromCondition = "ExtractExpressionFromCondition";
        public const string ExtractGenericType = "ExtractGenericType";
        public const string ExtractStatement = "ExtractStatement";
        public const string ExtractTypeDeclarationToNewFile = "ExtractTypeDeclarationToNewFile";
        public const string FormatAccessorBraces = "FormatAccessorBraces";
        public const string FormatArgumentList = "FormatArgumentList";
        public const string FormatBinaryExpression = "FormatBinaryExpression";
        public const string FormatConditionalExpression = "FormatConditionalExpression";
        public const string FormatExpressionChain = "FormatExpressionChain";
        public const string FormatInitializer = "FormatInitializer";
        public const string FormatParameterList = "FormatParameterList";
        public const string GenerateBaseConstructors = "GenerateBaseConstructors";
        public const string GenerateOnEventMethod = "GenerateOnEventMethod";
        public const string GenerateSwitchSections = "GenerateSwitchSections";
        public const string InitializeLocalWithDefaultValue = "InitializeLocalWithDefaultValue";
        public const string InlineMethod = "InlineMethod";
        public const string InsertStringInterpolation = "InsertStringInterpolation";
        public const string IntroduceAndInitializeField = "IntroduceAndInitializeField";
        public const string IntroduceAndInitializeProperty = "IntroduceAndInitializeProperty";
        public const string IntroduceConstructor = "IntroduceConstructor";
        public const string IntroduceFieldToLockOn = "IntroduceFieldToLockOn";
        public const string MakeMemberAbstract = "MakeMemberAbstract";
        public const string MarkAllMembersAsStatic = "MarkAllMembersAsStatic";
        public const string MarkMemberAsStatic = "MarkMemberAsStatic";
        public const string MergeAssignmentExpressionWithReturnStatement = "MergeAssignmentExpressionWithReturnStatement";
        public const string MergeAttributes = "MergeAttributes";
        public const string MergeIfStatements = "MergeIfStatements";
        public const string MergeLocalDeclarations = "MergeLocalDeclarations";
        public const string MergeStringLiterals = "MergeStringLiterals";
        public const string MergeStringLiteralsIntoMultilineStringLiteral = "MergeStringLiteralsIntoMultilineStringLiteral";
        public const string NegateBinaryExpression = "NegateBinaryExpression";
        public const string NegateBooleanLiteral = "NegateBooleanLiteral";
        public const string NegateOperator = "NegateOperator";
        public const string NotifyPropertyChanged = "NotifyPropertyChanged";
        public const string ParenthesizeExpression = "ParenthesizeExpression";
        public const string PromoteLocalToParameter = "PromoteLocalToParameter";
        public const string RemoveAllComments = "RemoveAllComments";
        public const string RemoveAllCommentsExceptDocumentationComments = "RemoveAllCommentsExceptDocumentationComments";
        public const string RemoveAllDocumentationComments = "RemoveAllDocumentationComments";
        public const string RemoveAllMemberDeclarations = "RemoveAllMemberDeclarations";
        public const string RemoveAllPreprocessorDirectives = "RemoveAllPreprocessorDirectives";
        public const string RemoveAllRegionDirectives = "RemoveAllRegionDirectives";
        public const string RemoveAllStatements = "RemoveAllStatements";
        public const string RemoveAllSwitchSections = "RemoveAllSwitchSections";
        public const string RemoveBraces = "RemoveBraces";
        public const string RemoveBracesFromIfElse = "RemoveBracesFromIfElse";
        public const string RemoveBracesFromSwitchSection = "RemoveBracesFromSwitchSection";
        public const string RemoveBracesFromSwitchSections = "RemoveBracesFromSwitchSections";
        public const string RemoveComment = "RemoveComment";
        public const string RemoveConditionFromLastElse = "RemoveConditionFromLastElse";
        public const string RemoveDirectiveAndRelatedDirectives = "RemoveDirectiveAndRelatedDirectives";
        public const string RemoveEmptyLines = "RemoveEmptyLines";
        public const string RemoveInterpolation = "RemoveInterpolation";
        public const string RemoveMember = "RemoveMember";
        public const string RemoveMemberDeclarations = "RemoveMemberDeclarations";
        public const string RemoveParameterNameFromArgument = "RemoveParameterNameFromArgument";
        public const string RemoveParentheses = "RemoveParentheses";
        public const string RemovePropertyInitializer = "RemovePropertyInitializer";
        public const string RemoveStatement = "RemoveStatement";
        public const string RemoveStatementsFromSwitchSections = "RemoveStatementsFromSwitchSections";
        public const string RemoveUsingAliasDirective = "RemoveUsingAliasDirective";
        public const string RenameBackingFieldAccordingToPropertyName = "RenameBackingFieldAccordingToPropertyName";
        public const string RenameIdentifierAccordingToTypeName = "RenameIdentifierAccordingToTypeName";
        public const string RenameMethodAccordingToTypeName = "RenameMethodAccordingToTypeName";
        public const string RenameParameterAccordingToTypeName = "RenameParameterAccordingToTypeName";
        public const string RenamePropertyAccordingToTypeName = "RenamePropertyAccordingToTypeName";
        public const string ReplaceAnonymousMethodWithLambdaExpression = "ReplaceAnonymousMethodWithLambdaExpression";
        public const string ReplaceAnyWithAllOrAllWithAny = "ReplaceAnyWithAllOrAllWithAny";
        public const string ReplaceAsWithCast = "ReplaceAsWithCast";
        public const string ReplaceConditionalExpressionWithExpression = "ReplaceConditionalExpressionWithExpression";
        public const string ReplaceConditionalExpressionWithIfElse = "ReplaceConditionalExpressionWithIfElse";
        public const string ReplaceConstantWithField = "ReplaceConstantWithField";
        public const string ReplaceCountWithLengthOrLengthWithCount = "ReplaceCountWithLengthOrLengthWithCount";
        public const string ReplaceDoStatementWithWhileStatement = "ReplaceDoStatementWithWhileStatement";
        public const string ReplaceEmptyStringLiteralWithStringEmpty = "ReplaceEmptyStringLiteralWithStringEmpty";
        public const string ReplaceEqualsExpressionWithStringEquals = "ReplaceEqualsExpressionWithStringEquals";
        public const string ReplaceFieldWithConstant = "ReplaceFieldWithConstant";
        public const string ReplaceForEachWithFor = "ReplaceForEachWithFor";
        public const string ReplaceForWithForEach = "ReplaceForWithForEach";
        public const string ReplaceHasFlagWithBitwiseOperation = "ReplaceHasFlagWithBitwiseOperation";
        public const string ReplaceIfElseWithConditionalExpression = "ReplaceIfElseWithConditionalExpression";
        public const string ReplaceIfElseWithSwitch = "ReplaceIfElseWithSwitch";
        public const string ReplaceIncrementOperatorWithDecrementOperator = "ReplaceIncrementOperatorWithDecrementOperator";
        public const string ReplaceInterpolatedStringWithInterpolationExpression = "ReplaceInterpolatedStringWithInterpolationExpression";
        public const string ReplaceInterpolatedStringWithStringLiteral = "ReplaceInterpolatedStringWithStringLiteral";
        public const string ReplaceMethodInvocationWithElementAccess = "ReplaceMethodInvocationWithElementAccess";
        public const string ReplaceMethodWithProperty = "ReplaceMethodWithProperty";
        public const string ReplacePrefixOperatorWithPostfixOperator = "ReplacePrefixOperatorWithPostfixOperator";
        public const string ReplacePropertyWithMethod = "ReplacePropertyWithMethod";
        public const string ReplaceRegularStringLiteralWithVerbatimStringLiteral = "ReplaceRegularStringLiteralWithVerbatimStringLiteral";
        public const string ReplaceStringEmptyWithEmptyStringLiteral = "ReplaceStringEmptyWithEmptyStringLiteral";
        public const string ReplaceStringFormatWithInterpolatedString = "ReplaceStringFormatWithInterpolatedString";
        public const string ReplaceStringLiteralWithCharacterLiteral = "ReplaceStringLiteralWithCharacterLiteral";
        public const string ReplaceSwitchWithIfElse = "ReplaceSwitchWithIfElse";
        public const string ReplaceVerbatimStringLiteralWithRegularStringLiteral = "ReplaceVerbatimStringLiteralWithRegularStringLiteral";
        public const string ReplaceVerbatimStringLiteralWithRegularStringLiterals = "ReplaceVerbatimStringLiteralWithRegularStringLiterals";
        public const string ReplaceWhileStatementWithDoStatement = "ReplaceWhileStatementWithDoStatement";
        public const string ReverseForLoop = "ReverseForLoop";
        public const string SimplifyLambdaExpression = "SimplifyLambdaExpression";
        public const string SplitAttributes = "SplitAttributes";
        public const string SplitVariableDeclaration = "SplitVariableDeclaration";
        public const string SwapExpressionsInBinaryExpression = "SwapExpressionsInBinaryExpression";
        public const string SwapExpressionsInConditionalExpression = "SwapExpressionsInConditionalExpression";
        public const string SwapMemberDeclarations = "SwapMemberDeclarations";
        public const string SwapStatementsInIfElse = "SwapStatementsInIfElse";
        public const string Uncomment = "Uncomment";
        public const string UseExpressionBodiedMember = "UseExpressionBodiedMember";
        public const string WrapInCondition = "WrapInCondition";
        public const string WrapInIfDirective = "WrapInIfDirective";
        public const string WrapInRegion = "WrapInRegion";
        public const string WrapInTryCatch = "WrapInTryCatch";
        public const string WrapInUsingStatement = "WrapInUsingStatement";
    }
}