<?xml version="1.0" encoding="utf-8"?>
<Refactorings>
  <Refactoring Id="AddBooleanComparison" Title="Add boolean comparison" ExtensionVersion="0.9.2">
    <Syntaxes>
      <Syntax>boolean? expression in place where must be boolean expression</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="AddBraces" Title="Add braces" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>do statement</Syntax>
      <Syntax>else clause</Syntax>
      <Syntax>fixed statement</Syntax>
      <Syntax>for statement</Syntax>
      <Syntax>foreach statement</Syntax>
      <Syntax>if statement</Syntax>
      <Syntax>lock statement</Syntax>
      <Syntax>using statement</Syntax>
      <Syntax>while statement</Syntax>
    </Syntaxes>
    <Scope>embedded statement</Scope>
  </Refactoring>
  <Refactoring Id="AddBracesToIfElse" Title="Add braces to if-else" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>if-else chain</Syntax>
    </Syntaxes>
    <Scope>embedded statement</Scope>
  </Refactoring>
  <Refactoring Id="AddBracesToSwitchSection" Title="Add braces to switch section" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>switch section</Syntax>
    </Syntaxes>
    <Scope>statements</Scope>
  </Refactoring>
  <Refactoring Id="AddBracesToSwitchSections" Title="Add braces to switch sections" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>switch statement</Syntax>
    </Syntaxes>
    <Scope>switch keyword</Scope>
  </Refactoring>
  <Refactoring Id="AddCastExpression" Title="Add cast expression" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>argument</Syntax>
      <Syntax>assignment expression</Syntax>
      <Syntax>return statement</Syntax>
      <Syntax>variable declaration</Syntax>
    </Syntaxes>
    <Images>
      <Image>AddCastExpressionToArgument</Image>
      <Image>AddCastExpressionToAssignmentExpression</Image>
      <Image>AddCastExpressionToReturnStatement</Image>
      <Image>AddCastExpressionToVariableDeclaration</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="AddConfigureAwait" Title="Add 'ConfigureAwait(false)'" ExtensionVersion="0.95.0">
    <Syntaxes>
      <Syntax>awaitable method invocation</Syntax>
    </Syntaxes>
    <Scope>method name</Scope>
  </Refactoring>
  <Refactoring Id="AddDefaultValueToParameter" Title="Add default value to parameter" ExtensionVersion="0.92.0">
    <Syntaxes>
      <Syntax>parameter without default value</Syntax>
    </Syntaxes>
    <Scope>identifier</Scope>
  </Refactoring>
  <Refactoring Id="AddDefaultValueToReturnStatement" Title="Add default value to return statement" ExtensionVersion="0.96.0">
    <Syntaxes>
      <Syntax>return statement without expression</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="AddIdentifierToVariableDeclaration" Title="Add identifier to variable declaration" ExtensionVersion="0.93.0">
    <Syntaxes>
      <Syntax>variable declaration</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="AddParameterNameToArgument" Title="Add parameter name to argument" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>argument list</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="AddParameterNameToParameter" Title="Add parameter name to parameter" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>parameter</Syntax>
    </Syntaxes>
    <Scope>missing identifier</Scope>
  </Refactoring>
  <Refactoring Id="AddToMethodInvocation" Title="Add 'To...' method invocation" ExtensionVersion="1.0.7">
    <Syntaxes>
      <Syntax>argument</Syntax>
      <Syntax>assignment expression</Syntax>
      <Syntax>return statement</Syntax>
      <Syntax>variable declaration</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="AddUsingDirective" Title="Add using directive" ExtensionVersion="0.97.0">
    <Syntaxes>
      <Syntax>qualified name</Syntax>
    </Syntaxes>
    <Scope>selected namespace</Scope>
  </Refactoring>
  <Refactoring Id="AddUsingStaticDirective" Title="Add using static directive" ExtensionVersion="0.91.0">
    <Syntaxes>
      <Syntax>member access expression (public or internal static class)</Syntax>
    </Syntaxes>
    <Scope>selected class name</Scope>
  </Refactoring>
  <Refactoring Id="CollapseToInitializer" Title="Collapse to initalizer" ExtensionVersion="0.98.0">
    <Syntaxes>
      <Syntax>object creation followed with assignment(s)</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="CommentOutMember" Title="Comment out member" ExtensionVersion="0.92.0">
    <Syntaxes>
      <Syntax>method</Syntax>
      <Syntax>constructor</Syntax>
      <Syntax>property</Syntax>
      <Syntax>indexer</Syntax>
      <Syntax>operator</Syntax>
      <Syntax>event</Syntax>
      <Syntax>namespace</Syntax>
      <Syntax>class</Syntax>
      <Syntax>struct</Syntax>
      <Syntax>interface</Syntax>
    </Syntaxes>
    <Scope>opening or closing brace</Scope>
  </Refactoring>
  <Refactoring Id="CommentOutStatement" Title="Comment out statement" ExtensionVersion="0.92.0">
    <Syntaxes>
      <Syntax>do statement</Syntax>
      <Syntax>fixed statement</Syntax>
      <Syntax>for statement</Syntax>
      <Syntax>foreach statement</Syntax>
      <Syntax>checked statement</Syntax>
      <Syntax>if statement</Syntax>
      <Syntax>lock statement</Syntax>
      <Syntax>switch statement</Syntax>
      <Syntax>try statement</Syntax>
      <Syntax>unchecked statement</Syntax>
      <Syntax>unsafe statement</Syntax>
      <Syntax>using statement</Syntax>
      <Syntax>while statement</Syntax>
    </Syntaxes>
    <Scope>opening or closing brace</Scope>
  </Refactoring>
  <Refactoring Id="CreateConditionFromBooleanExpression" Title="Create condition from boolean expression" ExtensionVersion="0.94.0">
    <Syntaxes>
      <Syntax>return statement</Syntax>
      <Syntax>yield return statement</Syntax>
      <Syntax>expression statement</Syntax>
    </Syntaxes>
    <Scope>boolean expression</Scope>
  </Refactoring>
  <Refactoring Id="DuplicateArgument" Title="Duplicate argument" ExtensionVersion="0.9.60">
    <Syntaxes>
      <Syntax>missing argument</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="DuplicateMember" Title="Duplicate member" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>method</Syntax>
      <Syntax>constructor</Syntax>
      <Syntax>property</Syntax>
      <Syntax>indexer</Syntax>
      <Syntax>operator</Syntax>
      <Syntax>event</Syntax>
      <Syntax>namespace</Syntax>
      <Syntax>class</Syntax>
      <Syntax>struct</Syntax>
      <Syntax>interface</Syntax>
    </Syntaxes>
    <Scope>opening or closing brace</Scope>
  </Refactoring>
  <Refactoring Id="DuplicateParameter" Title="Duplicate parameter" ExtensionVersion="0.9.40">
    <Syntaxes>
      <Syntax>missing parameter</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="DuplicateStatement" Title="Duplicate statement" ExtensionVersion="0.91.0">
    <Syntaxes>
      <Syntax>do statement</Syntax>
      <Syntax>fixed statement</Syntax>
      <Syntax>for statement</Syntax>
      <Syntax>foreach statement</Syntax>
      <Syntax>checked statement</Syntax>
      <Syntax>if statement</Syntax>
      <Syntax>lock statement</Syntax>
      <Syntax>switch statement</Syntax>
      <Syntax>try statement</Syntax>
      <Syntax>unchecked statement</Syntax>
      <Syntax>unsafe statement</Syntax>
      <Syntax>using statement</Syntax>
      <Syntax>while statement</Syntax>
    </Syntaxes>
    <Scope>opening or closing brace</Scope>
  </Refactoring>
  <Refactoring Id="ExpandAssignmentExpression" Title="Expand assignment expression" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>assignment expression</Syntax>
    </Syntaxes>
    <Scope>operator</Scope>
  </Refactoring>
  <Refactoring Id="ExpandCoalesceExpression" Title="Expand coalesce expression" ExtensionVersion="0.9.50">
    <Syntaxes>
      <Syntax>coalesce expression</Syntax>
    </Syntaxes>
    <Scope>?? operator</Scope>
  </Refactoring>
  <Refactoring Id="ExpandEvent" Title="Expand event" ExtensionVersion="0.9.50">
    <Syntaxes>
      <Syntax>event field declaration</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ExpandExpressionBodiedMember" Title="Expand expression-bodied member" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>expression body</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ExpandInitializer" Title="Expand initializer" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>initializer</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ExpandLambdaExpressionBody" Title="Expand lambda expression body" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>lambda expression</Syntax>
    </Syntaxes>
    <Scope>body</Scope>
  </Refactoring>
  <Refactoring Id="ExpandProperty" Title="Expand property" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>auto-property</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ExpandPropertyAndAddBackingField" Title="Expand property and add backing field" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>auto-property</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ExtractDeclarationFromUsingStatement" Title="Extract declaration from using statement" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>using statement</Syntax>
    </Syntaxes>
    <Scope>declaration</Scope>
  </Refactoring>
  <Refactoring Id="ExtractExpressionFromCondition" Title="Extract expression from condition" ExtensionVersion="0.95.0">
    <Syntaxes>
      <Syntax>if statement</Syntax>
      <Syntax>while statement</Syntax>
    </Syntaxes>
    <Scope>condition</Scope>
  </Refactoring>
  <Refactoring Id="ExtractGenericType" Title="Extract generic type" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>generic name with single type argument</Syntax>
    </Syntaxes>
    <Scope>type argument</Scope>
  </Refactoring>
  <Refactoring Id="ExtractStatement" Title="Extract statement(s)" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>else clause</Syntax>
      <Syntax>fixed statement</Syntax>
      <Syntax>for statement</Syntax>
      <Syntax>foreach statement</Syntax>
      <Syntax>checked statement</Syntax>
      <Syntax>if statement</Syntax>
      <Syntax>lock statement</Syntax>
      <Syntax>try statement</Syntax>
      <Syntax>unsafe statement</Syntax>
      <Syntax>using statement</Syntax>
      <Syntax>while statement</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ExtractTypeDeclarationToNewFile" Title="Extract type declaration to a new file" ExtensionVersion="1.0.1">
    <Syntaxes>
      <Syntax>class declaration</Syntax>
      <Syntax>struct declaration</Syntax>
      <Syntax>interface declaration</Syntax>
      <Syntax>enum declaration</Syntax>
      <Syntax>delegate declaration</Syntax>
    </Syntaxes>
    <Scope>identifier</Scope>
  </Refactoring>
  <Refactoring Id="FormatAccessorBraces" Title="Format accessor braces" ExtensionVersion="0.9.50">
    <Syntaxes>
      <Syntax>get accessor</Syntax>
      <Syntax>set accessor</Syntax>
      <Syntax>add accessor</Syntax>
      <Syntax>remove accessor</Syntax>
    </Syntaxes>
    <Scope>block</Scope>
    <Images>
      <Image>FormatAccessorBracesOnMultipleLines</Image>
      <Image>FormatAccessorBracesOnSingleLine</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="FormatArgumentList" Title="Format argument list" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>argument list</Syntax>
    </Syntaxes>
    <Images>
      <Image>FormatEachArgumentOnSeparateLine</Image>
      <Image>FormatAllArgumentsOnSingleLine</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="FormatBinaryExpression" Title="Format binary expression" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>logical and/or expression</Syntax>
      <Syntax>bitwise and/or expression</Syntax>
    </Syntaxes>
    <Images>
      <Image>FormatBinaryExpression</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="FormatConditionalExpression" Title="Format conditional expression" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>conditional expression</Syntax>
    </Syntaxes>
    <Images>
      <Image>FormatConditionalExpressionOnMultipleLines</Image>
      <Image>FormatConditionalExpressionOnSingleLine</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="FormatExpressionChain" Title="Format expression chain" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>expression chain</Syntax>
    </Syntaxes>
    <Images>
      <Image>FormatExpressionChainOnMultipleLines</Image>
      <Image>FormatExpressionChainOnSingleLine</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="FormatInitializer" Title="Format initializer" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>initializer</Syntax>
    </Syntaxes>
    <Images>
      <Image>FormatInitializerOnMultipleLines</Image>
      <Image>FormatInitializerOnSingleLine</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="FormatParameterList" Title="Format parameter list" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>parameter list</Syntax>
    </Syntaxes>
    <Images>
      <Image>FormatEachParameterOnSeparateLine</Image>
      <Image>FormatAllParametersOnSingleLine</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="GenerateBaseConstructors" Title="Generate base constructors" ExtensionVersion="1.0.5">
    <Syntaxes>
      <Syntax>class declaration</Syntax>
    </Syntaxes>
    <Scope>identifier</Scope>
  </Refactoring>
  <Refactoring Id="GenerateOnEventMethod" Title="Generate 'OnEvent' method" ExtensionVersion="1.0.6">
    <Syntaxes>
      <Syntax>event</Syntax>
    </Syntaxes>
    <Scope>identifier</Scope>
  </Refactoring>
  <Refactoring Id="GenerateSwitchSections" Title="Generate switch sections" ExtensionVersion="0.9.70">
    <Syntaxes>
      <Syntax>switch statement (that is empty or contains only default section)</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ChangeExplicitTypeToVar" Title="Change explicit type to 'var'" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>variable declaration</Syntax>
      <Syntax>foreach statement</Syntax>
    </Syntaxes>
    <Scope>type</Scope>
  </Refactoring>
  <Refactoring Id="ChangeMemberTypeAccordingToReturnExpression" Title="Change method/property/indexer type according to return expression" ExtensionVersion="0.9.40">
    <Syntaxes>
      <Syntax>return statement in method/property/indexer</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ChangeMemberTypeAccordingToYieldReturnExpression" Title="Change method/property/indexer type according to yield return expression" ExtensionVersion="0.9.50">
    <Syntaxes>
      <Syntax>yield return statement in method/property/indexer</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ChangeMethodReturnTypeToVoid" Title="Change method return type to 'void'" ExtensionVersion="0.91.0">
    <Syntaxes>
      <Syntax>method</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ChangeTypeAccordingToExpression" Title="Change type according to expression" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>variable declaration</Syntax>
      <Syntax>foreach statement</Syntax>
    </Syntaxes> 
    <Scope>type</Scope>
    <Images>
      <Image>ChangeTypeAccordingToExpression</Image>
      <Image>ChangeForEachTypeAccordingToExpression</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="ChangeVarToExplicitType" Title="Change 'var' to explicit type" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>variable declaration</Syntax>
      <Syntax>foreach statetement</Syntax>
    </Syntaxes>
    <Scope>type</Scope>
  </Refactoring>
  <Refactoring Id="CheckParameterForNull" Title="Check parameter for null" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>parameter</Syntax>
    </Syntaxes>
    <Scope>parameter identifier</Scope>
  </Refactoring>
  <Refactoring Id="InitializeLocalWithDefaultValue" Title="Initialize local with default value" ExtensionVersion="0.92.0">
    <Syntaxes>
      <Syntax>local declaration without initializer</Syntax>
    </Syntaxes>
    <Scope>identifier</Scope>
  </Refactoring>
  <Refactoring Id="InlineMethod" Title="Inline method" ExtensionVersion="0.96.0">
    <Syntaxes>
      <Syntax>static/extension method invocation</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="InsertStringInterpolation" Title="Insert string interpolation" ExtensionVersion="0.9.2">
    <Syntaxes>
      <Syntax>string literal</Syntax>
      <Syntax>interpolated string</Syntax>
    </Syntaxes>
    <Images>
      <Image>InsertInterpolationIntoStringLiteral</Image>
      <Image>InsertInterpolationIntoInterpolatedString</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="IntroduceAndInitializeField" Title="Introduce and initialize field" ExtensionVersion="0.98.0">
    <Syntaxes>
      <Syntax>constructor parameter</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="IntroduceAndInitializeProperty" Title="Introduce and initialize property" ExtensionVersion="0.98.0">
    <Syntaxes>
      <Syntax>constructor parameter</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="IntroduceConstructor" Title="Introduce constructor" IsEnabledByDefault="false" ExtensionVersion="0.9.40">
    <Syntaxes>
      <Syntax>field</Syntax>
      <Syntax>property</Syntax>
    </Syntaxes>
    <Scope></Scope>
  </Refactoring>
  <Refactoring Id="IntroduceFieldToLockOn" Title="Introduce field to lock on" ExtensionVersion="0.0.0">
    <Syntaxes>
      <Syntax>lock statement</Syntax>
    </Syntaxes>
    <Scope>missing expression</Scope>
  </Refactoring>
  <Refactoring Id="MakeMemberAbstract" Title="Make member abstract" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>non-abstract indexer/method/property in abstract class</Syntax>
    </Syntaxes>
    <Scope>indexer/method/property header</Scope>
  </Refactoring>
  <Refactoring Id="MarkAllMembersAsStatic" Title="Mark all members as static" ExtensionVersion="0.9.70">
    <Syntaxes>
      <Syntax>non-static field/method/property/event in static class</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="MarkMemberAsStatic" Title="Mark member as static" ExtensionVersion="0.9.70">
    <Syntaxes>
      <Syntax>non-static field/method/property/event in static class</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="MergeAssignmentExpressionWithReturnStatement" Title="Merge assignment expression with return statement" ExtensionVersion="0.98.0">
    <Syntaxes>
      <Syntax>assignment expression followed with return statement</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="MergeAttributes" Title="Merge attributes" ExtensionVersion="0.9.50">
    <Syntaxes>
      <Syntax>selected attribute lists</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="MergeIfStatements" Title="Merge if statements" ExtensionVersion="0.96.0">
    <Syntaxes>
      <Syntax>selected if statements</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="MergeLocalDeclarations" Title="Merge local declarations" ExtensionVersion="1.0.1">
    <Syntaxes>
      <Syntax>local declarations with same type</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="MergeStringLiterals" Title="Merge string literals" ExtensionVersion="0.9.60">
    <Syntaxes>
      <Syntax>concatenated string literals</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="MergeStringLiteralsIntoMultilineStringLiteral" Title="Merge string literals into multiline string literal" ExtensionVersion="0.9.60">
    <Syntaxes>
      <Syntax>concatenated string literals</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="NegateBinaryExpression" Title="Negate binary expression" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>logical and/or expression</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="NegateBooleanLiteral" Title="Negate boolean literal" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>boolean literal</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="NegateOperator" Title="Negate operator" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>!=</Syntax>
      <Syntax>&amp;&amp;</Syntax>
      <Syntax>||</Syntax>
      <Syntax>&lt;</Syntax>
      <Syntax>&lt;=</Syntax>
      <Syntax>==</Syntax>
      <Syntax>&gt;</Syntax>
      <Syntax>&gt;=</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="NotifyPropertyChanged" Title="Notify property changed" ExtensionVersion="0.9.50">
    <Syntaxes>
      <Syntax>property in class/struct that implements INotifyPropertyChanged</Syntax>
    </Syntaxes>
    <Scope>setter</Scope>
  </Refactoring>
  <Refactoring Id="ParenthesizeExpression" Title="Parenthesize expression" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>selected expression</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="PromoteLocalToParameter" Title="Promote local to parameter" ExtensionVersion="1.0.4">
    <Syntaxes>
      <Syntax>local declaration in method</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RemoveAllComments" Title="Remove all comments" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>singleline/multiline comment</Syntax>
      <Syntax>singleline/multiline documentation documentation comment</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RemoveAllCommentsExceptDocumentationComments" Title="Remove all comments (except documentation comments)" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>singleline/multiline comment</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RemoveAllDocumentationComments" Title="Remove all documentation comments" IsEnabledByDefault="false" ExtensionVersion="0.91.0">
    <Syntaxes>
      <Syntax>singleline/multiline documentation comment</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RemoveAllMemberDeclarations" Title="Remove all member declarations" ExtensionVersion="0.97.0">
    <Syntaxes>
      <Syntax>namespace</Syntax>
      <Syntax>class</Syntax>
      <Syntax>struct</Syntax>
      <Syntax>interface</Syntax>
    </Syntaxes>
    <Scope>opening or closing brace</Scope>
  </Refactoring>
  <Refactoring Id="RemoveAllPreprocessorDirectives" Title="Remove all preprocessor directives" ExtensionVersion="1.0.7">
    <Syntaxes>
      <Syntax>preprocessor directive</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RemoveAllRegionDirectives" Title="Remove all region directives" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>region directive</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RemoveAllStatements" Title="Remove all statements" ExtensionVersion="0.97.0">
    <Syntaxes>
      <Syntax>method</Syntax>
      <Syntax>constructor</Syntax>
      <Syntax>operator</Syntax>
    </Syntaxes>
    <Scope>opening or closing brace</Scope>
  </Refactoring>
  <Refactoring Id="RemoveAllSwitchSections" Title="Remove all switch sections" ExtensionVersion="0.95.0">
    <Syntaxes>
      <Syntax>switch statement</Syntax>
    </Syntaxes>
    <Scope>opening or closing brace</Scope>
  </Refactoring>
  <Refactoring Id="RemoveBraces" Title="Remove braces" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>do statement</Syntax>
      <Syntax>else clause</Syntax>
      <Syntax>fixed statement</Syntax>
      <Syntax>for statement</Syntax>
      <Syntax>foreach statement</Syntax>
      <Syntax>if statement</Syntax>
      <Syntax>lock statement</Syntax>
      <Syntax>using statement</Syntax>
      <Syntax>while statement</Syntax>
    </Syntaxes>
    <Scope>block with a single statement</Scope>
  </Refactoring>
  <Refactoring Id="RemoveBracesFromIfElse" Title="Remove braces from if-else" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>if-else chain</Syntax>
    </Syntaxes>
    <Scope>embedded statement</Scope>
  </Refactoring>
  <Refactoring Id="RemoveBracesFromSwitchSection" Title="Remove braces from switch section" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>switch section</Syntax>
    </Syntaxes>
    <Scope>block</Scope>
  </Refactoring>
  <Refactoring Id="RemoveBracesFromSwitchSections" Title="Remove braces from switch sections" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>switch statement</Syntax>
    </Syntaxes>
    <Scope>switch keyword</Scope>
  </Refactoring>
  <Refactoring Id="RemoveComment" Title="Remove comment" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>singleline/multiline comment</Syntax>
      <Syntax>singleline/multiline xml documentation comment</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RemoveConditionFromLastElse" Title="Remove condition from last else clause" ExtensionVersion="0.91.0">
    <Syntaxes>
      <Syntax>else clause</Syntax>
    </Syntaxes>
    <Scope>else keyword</Scope>
  </Refactoring>
  <Refactoring Id="RemoveDirectiveAndRelatedDirectives" Title="Remove directive and related directives" ExtensionVersion="0.95.0">
    <Syntaxes>
      <Syntax>preprocessor directive</Syntax>
      <Syntax>region directive</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RemoveEmptyLines" Title="Remove empty lines" ExtensionVersion="0.93.0">
    <Syntaxes>
      <Syntax>selected lines</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RemoveInterpolation" Title="Remove interpolation" ExtensionVersion="1.0.4">
    <Syntaxes>
      <Syntax>string interpolation</Syntax>
    </Syntaxes>
    <Scope>opening or closing brace</Scope>
  </Refactoring>
  <Refactoring Id="RemoveMember" Title="Remove member" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>method</Syntax>
      <Syntax>constructor</Syntax>
      <Syntax>property</Syntax>
      <Syntax>indexer</Syntax>
      <Syntax>operator</Syntax>
      <Syntax>event</Syntax>
      <Syntax>namespace</Syntax>
      <Syntax>class</Syntax>
      <Syntax>struct</Syntax>
      <Syntax>interface</Syntax>
    </Syntaxes>
    <Scope>opening or closing brace</Scope>
  </Refactoring>
  <Refactoring Id="RemoveMemberDeclarations" Title="Remove member declarations above/below" ExtensionVersion="0.94.0">
    <Syntaxes>
      <Syntax>empty line between member declarations</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RemoveParameterNameFromArgument" Title="Remove parameter name from argument" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>selected argument(s)</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RemoveParentheses" Title="Remove parentheses" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>parenthesized expression</Syntax>
    </Syntaxes>
    <Scope>opening or closing parenthesis</Scope>
  </Refactoring>
  <Refactoring Id="RemovePropertyInitializer" Title="Remove property initializer" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>property initializer</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RemoveStatement" Title="Remove statement" ExtensionVersion="0.91.0">
    <Syntaxes>
      <Syntax>do statement</Syntax>
      <Syntax>fixed statement</Syntax>
      <Syntax>for statement</Syntax>
      <Syntax>foreach statement</Syntax>
      <Syntax>checked statement</Syntax>
      <Syntax>if statement</Syntax>
      <Syntax>lock statement</Syntax>
      <Syntax>switch statement</Syntax>
      <Syntax>try statement</Syntax>
      <Syntax>unchecked statement</Syntax>
      <Syntax>unsafe statement</Syntax>
      <Syntax>using statement</Syntax>
      <Syntax>while statement</Syntax>
    </Syntaxes>
    <Scope>open/close brace</Scope>
  </Refactoring>
  <Refactoring Id="RemoveStatementsFromSwitchSections" Title="Remove statements from switch sections" ExtensionVersion="0.95.0">
    <Syntaxes>
      <Syntax>selected switch sections</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RemoveUsingAliasDirective" Title="Remove using alias directive" ExtensionVersion="1.0.9">
    <Syntaxes>
      <Syntax>using alias directive</Syntax>
    </Syntaxes>
    <Scope>identifier</Scope>
  </Refactoring>
  <Refactoring Id="RenameBackingFieldAccordingToPropertyName" Title="Rename backing field according to property name" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>field identifier inside property declaration</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RenameIdentifierAccordingToTypeName" Title="Rename identifier according to type name" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>foreach statement</Syntax>
      <Syntax>local/field/constant declaration</Syntax>
    </Syntaxes>
    <Scope>identifier</Scope>
    <Images>
      <Image>RenameForEachIdentifierAccordingToTypeName</Image>
      <Image>RenameFieldIdentifierAccordingToTypeName</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="RenameMethodAccordingToTypeName" Title="Rename method according to type name" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>method</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RenameParameterAccordingToTypeName" Title="Rename parameter according to its type name" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>parameter</Syntax>
    </Syntaxes>
    <Scope>parameter identifier</Scope>
  </Refactoring>
  <Refactoring Id="RenamePropertyAccordingToTypeName" Title="Rename property according to type name" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>property identifier</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceAnonymousMethodWithLambdaExpression" Title="Replace anonymous method with lambda expression" ExtensionVersion="0.91.0">
    <Syntaxes>
      <Syntax>anonymous method</Syntax>
    </Syntaxes>
    <Scope>delegate keyword</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceAnyWithAllOrAllWithAny" Title="Replace 'Any/All' with 'All/Any'" ExtensionVersion="0.9.2">
    <Syntaxes>
      <Syntax>Any(Func&lt;T, bool&gt; or All(Func&lt;T, bool&gt; from System.Linq.Enumerable namespace</Syntax>
    </Syntaxes>
    <Scope>method name</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceAsWithCast" Title="Replace as expression with cast expression" ExtensionVersion="1.1.0">
    <Syntaxes>
      <Syntax>as expression</Syntax>
    </Syntaxes>
    <Scope>operator</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceConditionalExpressionWithExpression" Title="Replace conditional expression with expression" ExtensionVersion="0.99.0">
    <Syntaxes>
      <Syntax>conditional expression</Syntax>
    </Syntaxes>
    <Scope>selected true/false expression</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceConditionalExpressionWithIfElse" Title="Replace conditional expression with if-else" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>conditional expression</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceConstantWithField" Title="Replace constant with field" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>constant declaration</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceCountWithLengthOrLengthWithCount" Title="Replace 'Count/Length' with 'Length/Count'" ExtensionVersion="0.91.0">
    <Syntaxes>
      <Syntax>member access expression</Syntax>
    </Syntaxes>
    <Scope>name</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceDoStatementWithWhileStatement" Title="Replace do statement with while statement" ExtensionVersion="0.91.0">
    <Syntaxes>
      <Syntax>do statement</Syntax>
    </Syntaxes>
    <Scope>do keyword</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceEmptyStringLiteralWithStringEmpty" Title="Replace &quot;&quot; with 'string.Empty'" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>empty string literal</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceEqualsExpressionWithStringEquals" Title="Replace equals expression with string.Equals" ExtensionVersion="1.1.0">
    <Syntaxes>
      <Syntax>equals expression</Syntax>
    </Syntaxes>
    <Scope>operator</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceFieldWithConstant" Title="Replace field with constant" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>read-only field</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceForEachWithFor" Title="Replace foreach statement with for statement" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>foreach statement</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceForWithForEach" Title="Replace for statement with foreach statement" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>for statement</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceHasFlagWithBitwiseOperation" Title="Replace 'HasFlag' with bitwise operation" ExtensionVersion="0.91.0">
    <Syntaxes>
      <Syntax>Enum.HasFlag method invocation</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceIfElseWithConditionalExpression" Title="Replace if-else with conditional expression" ExtensionVersion="0.99.0">
    <Syntaxes>
      <Syntax>conditional expression</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceIfElseWithSwitch" Title="Replace if-else with switch statement" ExtensionVersion="1.0.8">
    <Syntaxes>
      <Syntax>if statement</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceIncrementOperatorWithDecrementOperator" Title="Replace increment operator with decrement operator" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>prefix/postfix unary expression</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceInterpolatedStringWithInterpolationExpression" Title="Replace interpolated string with interpolation expression" ExtensionVersion="1.0.9">
    <Syntaxes>
      <Syntax>interpolated string with single interpolation and no text</Syntax>
    </Syntaxes>
    <Scope>interpolation</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceInterpolatedStringWithStringLiteral" Title="Replace interpolated string with string literal" ExtensionVersion="0.9.2">
    <Syntaxes>
      <Syntax>Interpolated string without any interpolation</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceMethodInvocationWithElementAccess" Title="Replace method invocation with '[]'" ExtensionVersion="0.9.40">
    <Syntaxes>
      <Syntax>First/Last/ElementAt method invocation</Syntax>
    </Syntaxes>
    <Scope>method name</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceMethodWithProperty" Title="Replace method with property" IsEnabledByDefault="false" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>method</Syntax>
    </Syntaxes>
    <Scope>method header</Scope>
  </Refactoring>
  <Refactoring Id="ReplacePrefixOperatorWithPostfixOperator" Title="Replace prefix operator to postfix operator" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>prefix/postfix unary expression</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplacePropertyWithMethod" Title="Replace property with method" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>read-only property</Syntax>
    </Syntaxes>
    <Scope>property header</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceRegularStringLiteralWithVerbatimStringLiteral" Title="Replace regular string literal with verbatim string literal" ExtensionVersion="0.9.60">
    <Syntaxes>
      <Syntax>regular string literal</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceStringEmptyWithEmptyStringLiteral" Title="Replace 'string.Empty' with &quot;&quot;" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>string.Empty</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceStringFormatWithInterpolatedString" Title="Replace 'string.Format' with interpolated string" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>string.Format method</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceStringLiteralWithCharacterLiteral" Title="Replace string literal with character literal" ExtensionVersion="0.9.70">
    <Syntaxes>
      <Syntax>string literal</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceSwitchWithIfElse" Title="Replace switch statement with if-else" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>switch statement</Syntax>
    </Syntaxes>
    <Scope>switch keyword</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceVerbatimStringLiteralWithRegularStringLiteral" Title="Replace verbatim string literal with regular string literal" ExtensionVersion="0.9.60">
    <Syntaxes>
      <Syntax>verbatim string literal</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceVerbatimStringLiteralWithRegularStringLiterals" Title="Replace verbatim string literal with regular string literals" ExtensionVersion="0.9.60">
    <Syntaxes>
      <Syntax>multiline verbatim string literal</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceWhileStatementWithDoStatement" Title="Replace while statement with do statement" ExtensionVersion="0.91.0">
    <Syntaxes>
      <Syntax>while statement</Syntax>
    </Syntaxes>
    <Scope>while keyword</Scope>
  </Refactoring>
  <Refactoring Id="ReverseForLoop" Title="Reverse for loop" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>for statement</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="SimplifyLambdaExpression" Title="Simplify lambda expression" ExtensionVersion="0.9.80">
    <Syntaxes>
      <Syntax>lambda expression with block with single single-line statement</Syntax>
    </Syntaxes>
    <Scope>body</Scope>
  </Refactoring>
  <Refactoring Id="SplitAttributes" Title="Split attributes" ExtensionVersion="0.9.50">
    <Syntaxes>
      <Syntax>selected attribute list</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="SplitVariableDeclaration" Title="Split variable declaration" ExtensionVersion="0.91.0">
    <Syntaxes>
      <Syntax>local declaration</Syntax>
      <Syntax>field declaration</Syntax>
      <Syntax>event field declaration</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="SwapExpressionsInBinaryExpression" Title="Swap expressions in binary expression" ExtensionVersion="0.9.40">
    <Syntaxes>
      <Syntax>logical and/or expression</Syntax>
    </Syntaxes>
    <Scope>binary operator</Scope>
  </Refactoring>
  <Refactoring Id="SwapExpressionsInConditionalExpression" Title="Swap expressions in conditional expression" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>conditional expression</Syntax>
    </Syntaxes>
    <Scope>condition</Scope>
  </Refactoring>
  <Refactoring Id="SwapMemberDeclarations" Title="Swap member declarations" ExtensionVersion="0.9.50">
    <Syntaxes>
      <Syntax>empty line between member declarations</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="SwapStatementsInIfElse" Title="Swap statements in if-else" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>if statement</Syntax>
    </Syntaxes>
    <Scope>if keyword</Scope>
  </Refactoring>
  <Refactoring Id="Uncomment" Title="Uncomment" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>single-line comment(s)</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="UseExpressionBodiedMember" Title="Use expression-bodied member" ExtensionVersion="0.9.60">
    <Syntaxes>
      <Syntax>method</Syntax>
      <Syntax>property</Syntax>
      <Syntax>indexer</Syntax>
      <Syntax>operator</Syntax>
    </Syntaxes>
    <Scope>body or accessor list</Scope>
  </Refactoring>
  <Refactoring Id="WrapInCondition" Title="Wrap in condition" ExtensionVersion="0.94.0">
    <Syntaxes>
      <Syntax>selected statements</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="WrapInIfDirective" Title="Wrap in #if directive" ExtensionVersion="0.97.0">
    <Syntaxes>
      <Syntax>selected lines</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="WrapInRegion" Title="Wrap in region" ExtensionVersion="0.97.0">
    <Syntaxes>
      <Syntax>selected lines</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="WrapInTryCatch" Title="Wrap in try-catch" ExtensionVersion="0.94.0">
    <Syntaxes>
      <Syntax>selected statements</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="WrapInUsingStatement" Title="Wrap in using statement" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>local declaration of type that implements IDisposable</Syntax>
    </Syntaxes>
  </Refactoring>
</Refactorings>