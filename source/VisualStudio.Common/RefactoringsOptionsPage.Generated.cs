// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

using System.ComponentModel;
using Roslynator.CSharp.Refactorings;
using Roslynator.VisualStudio.TypeConverters;

namespace Roslynator.VisualStudio
{
    public partial class RefactoringsOptionsPage
    {
        public RefactoringsOptionsPage()
        {
            AddBooleanComparison = true;
            AddBraces = true;
            AddBracesToIfElse = true;
            AddBracesToSwitchSection = true;
            AddBracesToSwitchSections = true;
            AddCastExpression = true;
            AddConfigureAwait = true;
            AddDefaultValueToParameter = true;
            AddDefaultValueToReturnStatement = true;
            AddIdentifierToVariableDeclaration = true;
            AddParameterNameToArgument = true;
            AddParameterNameToParameter = true;
            AddToMethodInvocation = true;
            AddUsingDirective = true;
            AddUsingStaticDirective = true;
            ChangeExplicitTypeToVar = true;
            ChangeMemberTypeAccordingToReturnExpression = true;
            ChangeMemberTypeAccordingToYieldReturnExpression = true;
            ChangeMethodReturnTypeToVoid = true;
            ChangeTypeAccordingToExpression = true;
            ChangeVarToExplicitType = true;
            CheckParameterForNull = true;
            CollapseToInitializer = true;
            CommentOutMember = true;
            CommentOutStatement = true;
            CreateConditionFromBooleanExpression = true;
            DuplicateArgument = true;
            DuplicateMember = true;
            DuplicateParameter = true;
            DuplicateStatement = true;
            ExpandAssignmentExpression = true;
            ExpandCoalesceExpression = true;
            ExpandEvent = true;
            ExpandExpressionBodiedMember = true;
            ExpandInitializer = true;
            ExpandLambdaExpressionBody = true;
            ExpandProperty = true;
            ExpandPropertyAndAddBackingField = true;
            ExtractDeclarationFromUsingStatement = true;
            ExtractExpressionFromCondition = true;
            ExtractGenericType = true;
            ExtractStatement = true;
            ExtractTypeDeclarationToNewFile = true;
            FormatAccessorBraces = true;
            FormatArgumentList = true;
            FormatBinaryExpression = true;
            FormatConditionalExpression = true;
            FormatExpressionChain = true;
            FormatInitializer = true;
            FormatParameterList = true;
            GenerateBaseConstructors = true;
            GenerateOnEventMethod = true;
            GenerateSwitchSections = true;
            InitializeLocalWithDefaultValue = true;
            InlineMethod = true;
            InsertStringInterpolation = true;
            IntroduceAndInitializeField = true;
            IntroduceAndInitializeProperty = true;
            IntroduceConstructor = false;
            MakeMemberAbstract = true;
            MarkAllMembersAsStatic = true;
            MarkMemberAsStatic = true;
            MergeAssignmentExpressionWithReturnStatement = true;
            MergeAttributes = true;
            MergeIfStatements = true;
            MergeLocalDeclarations = true;
            MergeStringLiterals = true;
            MergeStringLiteralsIntoMultilineStringLiteral = true;
            NegateBinaryExpression = true;
            NegateBooleanLiteral = true;
            NegateOperator = true;
            NotifyPropertyChanged = true;
            ParenthesizeExpression = true;
            PromoteLocalToParameter = true;
            RemoveAllComments = true;
            RemoveAllCommentsExceptDocumentationComments = true;
            RemoveAllDocumentationComments = false;
            RemoveAllMemberDeclarations = true;
            RemoveAllPreprocessorDirectives = true;
            RemoveAllRegionDirectives = true;
            RemoveAllStatements = true;
            RemoveAllSwitchSections = true;
            RemoveBraces = true;
            RemoveBracesFromIfElse = true;
            RemoveBracesFromSwitchSection = true;
            RemoveBracesFromSwitchSections = true;
            RemoveComment = true;
            RemoveConditionFromLastElse = true;
            RemoveDirectiveAndRelatedDirectives = true;
            RemoveEmptyLines = true;
            RemoveInterpolation = true;
            RemoveMember = true;
            RemoveMemberDeclarations = true;
            RemoveParameterNameFromArgument = true;
            RemoveParentheses = true;
            RemovePropertyInitializer = true;
            RemoveRegion = true;
            RemoveStatement = true;
            RemoveStatementsFromSwitchSections = true;
            RemoveUsingAliasDirective = true;
            RenameBackingFieldAccordingToPropertyName = true;
            RenameIdentifierAccordingToTypeName = true;
            RenameMethodAccordingToTypeName = true;
            RenameParameterAccordingToTypeName = true;
            RenamePropertyAccordingToTypeName = true;
            ReplaceAnonymousMethodWithLambdaExpression = true;
            ReplaceAnyWithAllOrAllWithAny = true;
            ReplaceAsWithCast = true;
            ReplaceConditionalExpressionWithExpression = true;
            ReplaceConditionalExpressionWithIfElse = true;
            ReplaceConstantWithField = true;
            ReplaceCountWithLengthOrLengthWithCount = true;
            ReplaceDoStatementWithWhileStatement = true;
            ReplaceEmptyStringLiteralWithStringEmpty = true;
            ReplaceEqualsExpressionWithStringEquals = true;
            ReplaceEqualsExpressionWithStringIsNullOrEmpty = true;
            ReplaceEqualsExpressionWithStringIsNullOrWhiteSpace = true;
            ReplaceFieldWithConstant = true;
            ReplaceForEachWithFor = true;
            ReplaceForWithForEach = true;
            ReplaceHasFlagWithBitwiseOperation = true;
            ReplaceIfElseWithConditionalExpression = true;
            ReplaceIfElseWithSwitch = true;
            ReplaceIncrementOperatorWithDecrementOperator = true;
            ReplaceInterpolatedStringWithInterpolationExpression = true;
            ReplaceInterpolatedStringWithStringLiteral = true;
            ReplaceMethodInvocationWithElementAccess = true;
            ReplaceMethodWithProperty = false;
            ReplacePrefixOperatorWithPostfixOperator = true;
            ReplacePropertyWithMethod = true;
            ReplaceRegularStringLiteralWithVerbatimStringLiteral = true;
            ReplaceStringEmptyWithEmptyStringLiteral = true;
            ReplaceStringFormatWithInterpolatedString = true;
            ReplaceStringLiteralWithCharacterLiteral = true;
            ReplaceSwitchWithIfElse = true;
            ReplaceVerbatimStringLiteralWithRegularStringLiteral = true;
            ReplaceVerbatimStringLiteralWithRegularStringLiterals = true;
            ReplaceWhileStatementWithDoStatement = true;
            ReverseForLoop = true;
            SimplifyLambdaExpression = true;
            SplitAttributes = true;
            SplitVariableDeclaration = true;
            SwapExpressionsInBinaryExpression = true;
            SwapExpressionsInConditionalExpression = true;
            SwapMemberDeclarations = true;
            SwapStatementsInIfElse = true;
            Uncomment = true;
            UseExpressionBodiedMember = true;
            WrapInCondition = true;
            WrapInIfDirective = true;
            WrapInRegion = true;
            WrapInTryCatch = true;
            WrapInUsingStatement = true;
        }

        public void Apply()
        {
            SetIsEnabled(RefactoringIdentifiers.AddBooleanComparison, AddBooleanComparison);
            SetIsEnabled(RefactoringIdentifiers.AddBraces, AddBraces);
            SetIsEnabled(RefactoringIdentifiers.AddBracesToIfElse, AddBracesToIfElse);
            SetIsEnabled(RefactoringIdentifiers.AddBracesToSwitchSection, AddBracesToSwitchSection);
            SetIsEnabled(RefactoringIdentifiers.AddBracesToSwitchSections, AddBracesToSwitchSections);
            SetIsEnabled(RefactoringIdentifiers.AddCastExpression, AddCastExpression);
            SetIsEnabled(RefactoringIdentifiers.AddConfigureAwait, AddConfigureAwait);
            SetIsEnabled(RefactoringIdentifiers.AddDefaultValueToParameter, AddDefaultValueToParameter);
            SetIsEnabled(RefactoringIdentifiers.AddDefaultValueToReturnStatement, AddDefaultValueToReturnStatement);
            SetIsEnabled(RefactoringIdentifiers.AddIdentifierToVariableDeclaration, AddIdentifierToVariableDeclaration);
            SetIsEnabled(RefactoringIdentifiers.AddParameterNameToArgument, AddParameterNameToArgument);
            SetIsEnabled(RefactoringIdentifiers.AddParameterNameToParameter, AddParameterNameToParameter);
            SetIsEnabled(RefactoringIdentifiers.AddToMethodInvocation, AddToMethodInvocation);
            SetIsEnabled(RefactoringIdentifiers.AddUsingDirective, AddUsingDirective);
            SetIsEnabled(RefactoringIdentifiers.AddUsingStaticDirective, AddUsingStaticDirective);
            SetIsEnabled(RefactoringIdentifiers.ChangeExplicitTypeToVar, ChangeExplicitTypeToVar);
            SetIsEnabled(RefactoringIdentifiers.ChangeMemberTypeAccordingToReturnExpression, ChangeMemberTypeAccordingToReturnExpression);
            SetIsEnabled(RefactoringIdentifiers.ChangeMemberTypeAccordingToYieldReturnExpression, ChangeMemberTypeAccordingToYieldReturnExpression);
            SetIsEnabled(RefactoringIdentifiers.ChangeMethodReturnTypeToVoid, ChangeMethodReturnTypeToVoid);
            SetIsEnabled(RefactoringIdentifiers.ChangeTypeAccordingToExpression, ChangeTypeAccordingToExpression);
            SetIsEnabled(RefactoringIdentifiers.ChangeVarToExplicitType, ChangeVarToExplicitType);
            SetIsEnabled(RefactoringIdentifiers.CheckParameterForNull, CheckParameterForNull);
            SetIsEnabled(RefactoringIdentifiers.CollapseToInitializer, CollapseToInitializer);
            SetIsEnabled(RefactoringIdentifiers.CommentOutMember, CommentOutMember);
            SetIsEnabled(RefactoringIdentifiers.CommentOutStatement, CommentOutStatement);
            SetIsEnabled(RefactoringIdentifiers.CreateConditionFromBooleanExpression, CreateConditionFromBooleanExpression);
            SetIsEnabled(RefactoringIdentifiers.DuplicateArgument, DuplicateArgument);
            SetIsEnabled(RefactoringIdentifiers.DuplicateMember, DuplicateMember);
            SetIsEnabled(RefactoringIdentifiers.DuplicateParameter, DuplicateParameter);
            SetIsEnabled(RefactoringIdentifiers.DuplicateStatement, DuplicateStatement);
            SetIsEnabled(RefactoringIdentifiers.ExpandAssignmentExpression, ExpandAssignmentExpression);
            SetIsEnabled(RefactoringIdentifiers.ExpandCoalesceExpression, ExpandCoalesceExpression);
            SetIsEnabled(RefactoringIdentifiers.ExpandEvent, ExpandEvent);
            SetIsEnabled(RefactoringIdentifiers.ExpandExpressionBodiedMember, ExpandExpressionBodiedMember);
            SetIsEnabled(RefactoringIdentifiers.ExpandInitializer, ExpandInitializer);
            SetIsEnabled(RefactoringIdentifiers.ExpandLambdaExpressionBody, ExpandLambdaExpressionBody);
            SetIsEnabled(RefactoringIdentifiers.ExpandProperty, ExpandProperty);
            SetIsEnabled(RefactoringIdentifiers.ExpandPropertyAndAddBackingField, ExpandPropertyAndAddBackingField);
            SetIsEnabled(RefactoringIdentifiers.ExtractDeclarationFromUsingStatement, ExtractDeclarationFromUsingStatement);
            SetIsEnabled(RefactoringIdentifiers.ExtractExpressionFromCondition, ExtractExpressionFromCondition);
            SetIsEnabled(RefactoringIdentifiers.ExtractGenericType, ExtractGenericType);
            SetIsEnabled(RefactoringIdentifiers.ExtractStatement, ExtractStatement);
            SetIsEnabled(RefactoringIdentifiers.ExtractTypeDeclarationToNewFile, ExtractTypeDeclarationToNewFile);
            SetIsEnabled(RefactoringIdentifiers.FormatAccessorBraces, FormatAccessorBraces);
            SetIsEnabled(RefactoringIdentifiers.FormatArgumentList, FormatArgumentList);
            SetIsEnabled(RefactoringIdentifiers.FormatBinaryExpression, FormatBinaryExpression);
            SetIsEnabled(RefactoringIdentifiers.FormatConditionalExpression, FormatConditionalExpression);
            SetIsEnabled(RefactoringIdentifiers.FormatExpressionChain, FormatExpressionChain);
            SetIsEnabled(RefactoringIdentifiers.FormatInitializer, FormatInitializer);
            SetIsEnabled(RefactoringIdentifiers.FormatParameterList, FormatParameterList);
            SetIsEnabled(RefactoringIdentifiers.GenerateBaseConstructors, GenerateBaseConstructors);
            SetIsEnabled(RefactoringIdentifiers.GenerateOnEventMethod, GenerateOnEventMethod);
            SetIsEnabled(RefactoringIdentifiers.GenerateSwitchSections, GenerateSwitchSections);
            SetIsEnabled(RefactoringIdentifiers.InitializeLocalWithDefaultValue, InitializeLocalWithDefaultValue);
            SetIsEnabled(RefactoringIdentifiers.InlineMethod, InlineMethod);
            SetIsEnabled(RefactoringIdentifiers.InsertStringInterpolation, InsertStringInterpolation);
            SetIsEnabled(RefactoringIdentifiers.IntroduceAndInitializeField, IntroduceAndInitializeField);
            SetIsEnabled(RefactoringIdentifiers.IntroduceAndInitializeProperty, IntroduceAndInitializeProperty);
            SetIsEnabled(RefactoringIdentifiers.IntroduceConstructor, IntroduceConstructor);
            SetIsEnabled(RefactoringIdentifiers.MakeMemberAbstract, MakeMemberAbstract);
            SetIsEnabled(RefactoringIdentifiers.MarkAllMembersAsStatic, MarkAllMembersAsStatic);
            SetIsEnabled(RefactoringIdentifiers.MarkMemberAsStatic, MarkMemberAsStatic);
            SetIsEnabled(RefactoringIdentifiers.MergeAssignmentExpressionWithReturnStatement, MergeAssignmentExpressionWithReturnStatement);
            SetIsEnabled(RefactoringIdentifiers.MergeAttributes, MergeAttributes);
            SetIsEnabled(RefactoringIdentifiers.MergeIfStatements, MergeIfStatements);
            SetIsEnabled(RefactoringIdentifiers.MergeLocalDeclarations, MergeLocalDeclarations);
            SetIsEnabled(RefactoringIdentifiers.MergeStringLiterals, MergeStringLiterals);
            SetIsEnabled(RefactoringIdentifiers.MergeStringLiteralsIntoMultilineStringLiteral, MergeStringLiteralsIntoMultilineStringLiteral);
            SetIsEnabled(RefactoringIdentifiers.NegateBinaryExpression, NegateBinaryExpression);
            SetIsEnabled(RefactoringIdentifiers.NegateBooleanLiteral, NegateBooleanLiteral);
            SetIsEnabled(RefactoringIdentifiers.NegateOperator, NegateOperator);
            SetIsEnabled(RefactoringIdentifiers.NotifyPropertyChanged, NotifyPropertyChanged);
            SetIsEnabled(RefactoringIdentifiers.ParenthesizeExpression, ParenthesizeExpression);
            SetIsEnabled(RefactoringIdentifiers.PromoteLocalToParameter, PromoteLocalToParameter);
            SetIsEnabled(RefactoringIdentifiers.RemoveAllComments, RemoveAllComments);
            SetIsEnabled(RefactoringIdentifiers.RemoveAllCommentsExceptDocumentationComments, RemoveAllCommentsExceptDocumentationComments);
            SetIsEnabled(RefactoringIdentifiers.RemoveAllDocumentationComments, RemoveAllDocumentationComments);
            SetIsEnabled(RefactoringIdentifiers.RemoveAllMemberDeclarations, RemoveAllMemberDeclarations);
            SetIsEnabled(RefactoringIdentifiers.RemoveAllPreprocessorDirectives, RemoveAllPreprocessorDirectives);
            SetIsEnabled(RefactoringIdentifiers.RemoveAllRegionDirectives, RemoveAllRegionDirectives);
            SetIsEnabled(RefactoringIdentifiers.RemoveAllStatements, RemoveAllStatements);
            SetIsEnabled(RefactoringIdentifiers.RemoveAllSwitchSections, RemoveAllSwitchSections);
            SetIsEnabled(RefactoringIdentifiers.RemoveBraces, RemoveBraces);
            SetIsEnabled(RefactoringIdentifiers.RemoveBracesFromIfElse, RemoveBracesFromIfElse);
            SetIsEnabled(RefactoringIdentifiers.RemoveBracesFromSwitchSection, RemoveBracesFromSwitchSection);
            SetIsEnabled(RefactoringIdentifiers.RemoveBracesFromSwitchSections, RemoveBracesFromSwitchSections);
            SetIsEnabled(RefactoringIdentifiers.RemoveComment, RemoveComment);
            SetIsEnabled(RefactoringIdentifiers.RemoveConditionFromLastElse, RemoveConditionFromLastElse);
            SetIsEnabled(RefactoringIdentifiers.RemoveDirectiveAndRelatedDirectives, RemoveDirectiveAndRelatedDirectives);
            SetIsEnabled(RefactoringIdentifiers.RemoveEmptyLines, RemoveEmptyLines);
            SetIsEnabled(RefactoringIdentifiers.RemoveInterpolation, RemoveInterpolation);
            SetIsEnabled(RefactoringIdentifiers.RemoveMember, RemoveMember);
            SetIsEnabled(RefactoringIdentifiers.RemoveMemberDeclarations, RemoveMemberDeclarations);
            SetIsEnabled(RefactoringIdentifiers.RemoveParameterNameFromArgument, RemoveParameterNameFromArgument);
            SetIsEnabled(RefactoringIdentifiers.RemoveParentheses, RemoveParentheses);
            SetIsEnabled(RefactoringIdentifiers.RemovePropertyInitializer, RemovePropertyInitializer);
            SetIsEnabled(RefactoringIdentifiers.RemoveRegion, RemoveRegion);
            SetIsEnabled(RefactoringIdentifiers.RemoveStatement, RemoveStatement);
            SetIsEnabled(RefactoringIdentifiers.RemoveStatementsFromSwitchSections, RemoveStatementsFromSwitchSections);
            SetIsEnabled(RefactoringIdentifiers.RemoveUsingAliasDirective, RemoveUsingAliasDirective);
            SetIsEnabled(RefactoringIdentifiers.RenameBackingFieldAccordingToPropertyName, RenameBackingFieldAccordingToPropertyName);
            SetIsEnabled(RefactoringIdentifiers.RenameIdentifierAccordingToTypeName, RenameIdentifierAccordingToTypeName);
            SetIsEnabled(RefactoringIdentifiers.RenameMethodAccordingToTypeName, RenameMethodAccordingToTypeName);
            SetIsEnabled(RefactoringIdentifiers.RenameParameterAccordingToTypeName, RenameParameterAccordingToTypeName);
            SetIsEnabled(RefactoringIdentifiers.RenamePropertyAccordingToTypeName, RenamePropertyAccordingToTypeName);
            SetIsEnabled(RefactoringIdentifiers.ReplaceAnonymousMethodWithLambdaExpression, ReplaceAnonymousMethodWithLambdaExpression);
            SetIsEnabled(RefactoringIdentifiers.ReplaceAnyWithAllOrAllWithAny, ReplaceAnyWithAllOrAllWithAny);
            SetIsEnabled(RefactoringIdentifiers.ReplaceAsWithCast, ReplaceAsWithCast);
            SetIsEnabled(RefactoringIdentifiers.ReplaceConditionalExpressionWithExpression, ReplaceConditionalExpressionWithExpression);
            SetIsEnabled(RefactoringIdentifiers.ReplaceConditionalExpressionWithIfElse, ReplaceConditionalExpressionWithIfElse);
            SetIsEnabled(RefactoringIdentifiers.ReplaceConstantWithField, ReplaceConstantWithField);
            SetIsEnabled(RefactoringIdentifiers.ReplaceCountWithLengthOrLengthWithCount, ReplaceCountWithLengthOrLengthWithCount);
            SetIsEnabled(RefactoringIdentifiers.ReplaceDoStatementWithWhileStatement, ReplaceDoStatementWithWhileStatement);
            SetIsEnabled(RefactoringIdentifiers.ReplaceEmptyStringLiteralWithStringEmpty, ReplaceEmptyStringLiteralWithStringEmpty);
            SetIsEnabled(RefactoringIdentifiers.ReplaceEqualsExpressionWithStringEquals, ReplaceEqualsExpressionWithStringEquals);
            SetIsEnabled(RefactoringIdentifiers.ReplaceEqualsExpressionWithStringIsNullOrEmpty, ReplaceEqualsExpressionWithStringIsNullOrEmpty);
            SetIsEnabled(RefactoringIdentifiers.ReplaceEqualsExpressionWithStringIsNullOrWhiteSpace, ReplaceEqualsExpressionWithStringIsNullOrWhiteSpace);
            SetIsEnabled(RefactoringIdentifiers.ReplaceFieldWithConstant, ReplaceFieldWithConstant);
            SetIsEnabled(RefactoringIdentifiers.ReplaceForEachWithFor, ReplaceForEachWithFor);
            SetIsEnabled(RefactoringIdentifiers.ReplaceForWithForEach, ReplaceForWithForEach);
            SetIsEnabled(RefactoringIdentifiers.ReplaceHasFlagWithBitwiseOperation, ReplaceHasFlagWithBitwiseOperation);
            SetIsEnabled(RefactoringIdentifiers.ReplaceIfElseWithConditionalExpression, ReplaceIfElseWithConditionalExpression);
            SetIsEnabled(RefactoringIdentifiers.ReplaceIfElseWithSwitch, ReplaceIfElseWithSwitch);
            SetIsEnabled(RefactoringIdentifiers.ReplaceIncrementOperatorWithDecrementOperator, ReplaceIncrementOperatorWithDecrementOperator);
            SetIsEnabled(RefactoringIdentifiers.ReplaceInterpolatedStringWithInterpolationExpression, ReplaceInterpolatedStringWithInterpolationExpression);
            SetIsEnabled(RefactoringIdentifiers.ReplaceInterpolatedStringWithStringLiteral, ReplaceInterpolatedStringWithStringLiteral);
            SetIsEnabled(RefactoringIdentifiers.ReplaceMethodInvocationWithElementAccess, ReplaceMethodInvocationWithElementAccess);
            SetIsEnabled(RefactoringIdentifiers.ReplaceMethodWithProperty, ReplaceMethodWithProperty);
            SetIsEnabled(RefactoringIdentifiers.ReplacePrefixOperatorWithPostfixOperator, ReplacePrefixOperatorWithPostfixOperator);
            SetIsEnabled(RefactoringIdentifiers.ReplacePropertyWithMethod, ReplacePropertyWithMethod);
            SetIsEnabled(RefactoringIdentifiers.ReplaceRegularStringLiteralWithVerbatimStringLiteral, ReplaceRegularStringLiteralWithVerbatimStringLiteral);
            SetIsEnabled(RefactoringIdentifiers.ReplaceStringEmptyWithEmptyStringLiteral, ReplaceStringEmptyWithEmptyStringLiteral);
            SetIsEnabled(RefactoringIdentifiers.ReplaceStringFormatWithInterpolatedString, ReplaceStringFormatWithInterpolatedString);
            SetIsEnabled(RefactoringIdentifiers.ReplaceStringLiteralWithCharacterLiteral, ReplaceStringLiteralWithCharacterLiteral);
            SetIsEnabled(RefactoringIdentifiers.ReplaceSwitchWithIfElse, ReplaceSwitchWithIfElse);
            SetIsEnabled(RefactoringIdentifiers.ReplaceVerbatimStringLiteralWithRegularStringLiteral, ReplaceVerbatimStringLiteralWithRegularStringLiteral);
            SetIsEnabled(RefactoringIdentifiers.ReplaceVerbatimStringLiteralWithRegularStringLiterals, ReplaceVerbatimStringLiteralWithRegularStringLiterals);
            SetIsEnabled(RefactoringIdentifiers.ReplaceWhileStatementWithDoStatement, ReplaceWhileStatementWithDoStatement);
            SetIsEnabled(RefactoringIdentifiers.ReverseForLoop, ReverseForLoop);
            SetIsEnabled(RefactoringIdentifiers.SimplifyLambdaExpression, SimplifyLambdaExpression);
            SetIsEnabled(RefactoringIdentifiers.SplitAttributes, SplitAttributes);
            SetIsEnabled(RefactoringIdentifiers.SplitVariableDeclaration, SplitVariableDeclaration);
            SetIsEnabled(RefactoringIdentifiers.SwapExpressionsInBinaryExpression, SwapExpressionsInBinaryExpression);
            SetIsEnabled(RefactoringIdentifiers.SwapExpressionsInConditionalExpression, SwapExpressionsInConditionalExpression);
            SetIsEnabled(RefactoringIdentifiers.SwapMemberDeclarations, SwapMemberDeclarations);
            SetIsEnabled(RefactoringIdentifiers.SwapStatementsInIfElse, SwapStatementsInIfElse);
            SetIsEnabled(RefactoringIdentifiers.Uncomment, Uncomment);
            SetIsEnabled(RefactoringIdentifiers.UseExpressionBodiedMember, UseExpressionBodiedMember);
            SetIsEnabled(RefactoringIdentifiers.WrapInCondition, WrapInCondition);
            SetIsEnabled(RefactoringIdentifiers.WrapInIfDirective, WrapInIfDirective);
            SetIsEnabled(RefactoringIdentifiers.WrapInRegion, WrapInRegion);
            SetIsEnabled(RefactoringIdentifiers.WrapInTryCatch, WrapInTryCatch);
            SetIsEnabled(RefactoringIdentifiers.WrapInUsingStatement, WrapInUsingStatement);
        }

        [Category(RefactoringCategory)]
        [DisplayName("Add boolean comparison")]
        [Description("Syntax: boolean? expression in place where must be boolean expression")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddBooleanComparison
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Add braces")]
        [Description("Syntax: do statement, else clause, fixed statement, for statement, foreach statement, if statement, lock statement, using statement, while statement\r\nScope: embedded statement")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddBraces
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Add braces to if-else")]
        [Description("Syntax: if-else chain\r\nScope: embedded statement")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddBracesToIfElse
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Add braces to switch section")]
        [Description("Syntax: switch section\r\nScope: statements")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddBracesToSwitchSection
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Add braces to switch sections")]
        [Description("Syntax: switch statement\r\nScope: switch keyword")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddBracesToSwitchSections
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Add cast expression")]
        [Description("Syntax: argument, assignment expression, return statement, variable declaration")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddCastExpression
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Add 'ConfigureAwait(false)'")]
        [Description("Syntax: awaitable method invocation\r\nScope: method name")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddConfigureAwait
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Add default value to parameter")]
        [Description("Syntax: parameter without default value\r\nScope: identifier")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddDefaultValueToParameter
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Add default value to return statement")]
        [Description("Syntax: return statement without expression")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddDefaultValueToReturnStatement
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Add identifier to variable declaration")]
        [Description("Syntax: variable declaration")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddIdentifierToVariableDeclaration
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Add parameter name to argument")]
        [Description("Syntax: argument list")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddParameterNameToArgument
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Add parameter name to parameter")]
        [Description("Syntax: parameter\r\nScope: missing identifier")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddParameterNameToParameter
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Add 'To...' method invocation")]
        [Description("Syntax: argument, assignment expression, return statement, variable declaration")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddToMethodInvocation
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Add using directive")]
        [Description("Syntax: qualified name\r\nScope: selected namespace")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddUsingDirective
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Add using static directive")]
        [Description("Syntax: member access expression (public or internal static class)\r\nScope: selected class name")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddUsingStaticDirective
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Change explicit type to 'var'")]
        [Description("Syntax: variable declaration, foreach statement\r\nScope: type")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ChangeExplicitTypeToVar
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Change method/property/indexer type according to return expression")]
        [Description("Syntax: return statement in method/property/indexer")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ChangeMemberTypeAccordingToReturnExpression
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Change method/property/indexer type according to yield return expression")]
        [Description("Syntax: yield return statement in method/property/indexer")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ChangeMemberTypeAccordingToYieldReturnExpression
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Change method return type to 'void'")]
        [Description("Syntax: method")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ChangeMethodReturnTypeToVoid
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Change type according to expression")]
        [Description("Syntax: variable declaration, foreach statement\r\nScope: type")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ChangeTypeAccordingToExpression
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Change 'var' to explicit type")]
        [Description("Syntax: variable declaration, foreach statetement\r\nScope: type")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ChangeVarToExplicitType
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Check parameter for null")]
        [Description("Syntax: parameter\r\nScope: parameter identifier")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool CheckParameterForNull
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Collapse to initalizer")]
        [Description("Syntax: object creation followed with assignment(s)")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool CollapseToInitializer
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Comment out member")]
        [Description("Syntax: method, constructor, property, indexer, operator, event, namespace, class, struct, interface\r\nScope: opening or closing brace")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool CommentOutMember
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Comment out statement")]
        [Description("Syntax: do statement, fixed statement, for statement, foreach statement, checked statement, if statement, lock statement, switch statement, try statement, unchecked statement, unsafe statement, using statement, while statement\r\nScope: opening or closing brace")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool CommentOutStatement
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Create condition from boolean expression")]
        [Description("Syntax: return statement, yield return statement, expression statement\r\nScope: boolean expression")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool CreateConditionFromBooleanExpression
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Duplicate argument")]
        [Description("Syntax: missing argument")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool DuplicateArgument
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Duplicate member")]
        [Description("Syntax: method, constructor, property, indexer, operator, event, namespace, class, struct, interface\r\nScope: opening or closing brace")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool DuplicateMember
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Duplicate parameter")]
        [Description("Syntax: missing parameter")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool DuplicateParameter
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Duplicate statement")]
        [Description("Syntax: do statement, fixed statement, for statement, foreach statement, checked statement, if statement, lock statement, switch statement, try statement, unchecked statement, unsafe statement, using statement, while statement\r\nScope: opening or closing brace")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool DuplicateStatement
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Expand assignment expression")]
        [Description("Syntax: assignment expression\r\nScope: operator")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExpandAssignmentExpression
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Expand coalesce expression")]
        [Description("Syntax: coalesce expression\r\nScope: ?? operator")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExpandCoalesceExpression
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Expand event")]
        [Description("Syntax: event field declaration")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExpandEvent
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Expand expression-bodied member")]
        [Description("Syntax: expression body")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExpandExpressionBodiedMember
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Expand initializer")]
        [Description("Syntax: initializer")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExpandInitializer
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Expand lambda expression body")]
        [Description("Syntax: lambda expression\r\nScope: body")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExpandLambdaExpressionBody
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Expand property")]
        [Description("Syntax: auto-property")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExpandProperty
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Expand property and add backing field")]
        [Description("Syntax: auto-property")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExpandPropertyAndAddBackingField
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Extract declaration from using statement")]
        [Description("Syntax: using statement\r\nScope: declaration")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExtractDeclarationFromUsingStatement
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Extract expression from condition")]
        [Description("Syntax: if statement, while statement\r\nScope: condition")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExtractExpressionFromCondition
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Extract generic type")]
        [Description("Syntax: generic name with single type argument\r\nScope: type argument")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExtractGenericType
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Extract statement(s)")]
        [Description("Syntax: else clause, fixed statement, for statement, foreach statement, checked statement, if statement, lock statement, try statement, unsafe statement, using statement, while statement")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExtractStatement
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Extract type declaration to a new file")]
        [Description("Syntax: class declaration, struct declaration, interface declaration, enum declaration, delegate declaration\r\nScope: identifier")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExtractTypeDeclarationToNewFile
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Format accessor braces")]
        [Description("Syntax: get accessor, set accessor, add accessor, remove accessor\r\nScope: block")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool FormatAccessorBraces
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Format argument list")]
        [Description("Syntax: argument list")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool FormatArgumentList
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Format binary expression")]
        [Description("Syntax: logical and/or expression, bitwise and/or expression")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool FormatBinaryExpression
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Format conditional expression")]
        [Description("Syntax: conditional expression")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool FormatConditionalExpression
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Format expression chain")]
        [Description("Syntax: expression chain")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool FormatExpressionChain
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Format initializer")]
        [Description("Syntax: initializer")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool FormatInitializer
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Format parameter list")]
        [Description("Syntax: parameter list")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool FormatParameterList
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Generate base constructors")]
        [Description("Syntax: class declaration\r\nScope: identifier")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool GenerateBaseConstructors
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Generate 'OnEvent' method")]
        [Description("Syntax: event\r\nScope: identifier")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool GenerateOnEventMethod
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Generate switch sections")]
        [Description("Syntax: switch statement (that is empty or contains only default section)")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool GenerateSwitchSections
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Initialize local with default value")]
        [Description("Syntax: local declaration without initializer\r\nScope: identifier")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool InitializeLocalWithDefaultValue
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Inline method")]
        [Description("Syntax: static/extension method invocation")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool InlineMethod
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Insert string interpolation")]
        [Description("Syntax: string literal, interpolated string")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool InsertStringInterpolation
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Introduce and initialize field")]
        [Description("Syntax: constructor parameter")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool IntroduceAndInitializeField
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Introduce and initialize property")]
        [Description("Syntax: constructor parameter")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool IntroduceAndInitializeProperty
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Introduce constructor")]
        [Description("Syntax: field, property")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool IntroduceConstructor
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Make member abstract")]
        [Description("Syntax: non-abstract indexer/method/property in abstract class\r\nScope: indexer/method/property header")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool MakeMemberAbstract
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Mark all members as static")]
        [Description("Syntax: non-static field/method/property/event in static class")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool MarkAllMembersAsStatic
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Mark member as static")]
        [Description("Syntax: non-static field/method/property/event in static class")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool MarkMemberAsStatic
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Merge assignment expression with return statement")]
        [Description("Syntax: assignment expression followed with return statement")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool MergeAssignmentExpressionWithReturnStatement
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Merge attributes")]
        [Description("Syntax: selected attribute lists")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool MergeAttributes
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Merge if statements")]
        [Description("Syntax: selected if statements")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool MergeIfStatements
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Merge local declarations")]
        [Description("Syntax: local declarations with same type")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool MergeLocalDeclarations
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Merge string literals")]
        [Description("Syntax: concatenated string literals")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool MergeStringLiterals
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Merge string literals into multiline string literal")]
        [Description("Syntax: concatenated string literals")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool MergeStringLiteralsIntoMultilineStringLiteral
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Negate binary expression")]
        [Description("Syntax: logical and/or expression")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool NegateBinaryExpression
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Negate boolean literal")]
        [Description("Syntax: boolean literal")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool NegateBooleanLiteral
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Negate operator")]
        [Description("Syntax: !=, &&, ||, <, <=, ==, >, >=")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool NegateOperator
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Notify property changed")]
        [Description("Syntax: property in class/struct that implements INotifyPropertyChanged\r\nScope: setter")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool NotifyPropertyChanged
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Parenthesize expression")]
        [Description("Syntax: selected expression")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ParenthesizeExpression
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Promote local to parameter")]
        [Description("Syntax: local declaration in method")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool PromoteLocalToParameter
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove all comments")]
        [Description("Syntax: singleline/multiline comment, singleline/multiline documentation documentation comment")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveAllComments
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove all comments (except documentation comments)")]
        [Description("Syntax: singleline/multiline comment")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveAllCommentsExceptDocumentationComments
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove all documentation comments")]
        [Description("Syntax: singleline/multiline documentation comment")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveAllDocumentationComments
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove all member declarations")]
        [Description("Syntax: namespace, class, struct, interface\r\nScope: opening or closing brace")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveAllMemberDeclarations
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove all preprocessor directives")]
        [Description("Syntax: preprocessor directive")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveAllPreprocessorDirectives
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove all region directives")]
        [Description("Syntax: region directive")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveAllRegionDirectives
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove all statements")]
        [Description("Syntax: method, constructor, operator\r\nScope: opening or closing brace")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveAllStatements
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove all switch sections")]
        [Description("Syntax: switch statement\r\nScope: opening or closing brace")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveAllSwitchSections
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove braces")]
        [Description("Syntax: do statement, else clause, fixed statement, for statement, foreach statement, if statement, lock statement, using statement, while statement\r\nScope: block with a single statement")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveBraces
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove braces from if-else")]
        [Description("Syntax: if-else chain\r\nScope: embedded statement")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveBracesFromIfElse
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove braces from switch section")]
        [Description("Syntax: switch section\r\nScope: block")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveBracesFromSwitchSection
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove braces from switch sections")]
        [Description("Syntax: switch statement\r\nScope: switch keyword")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveBracesFromSwitchSections
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove comment")]
        [Description("Syntax: singleline/multiline comment, singleline/multiline xml documentation comment")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveComment
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove condition from last else clause")]
        [Description("Syntax: else clause\r\nScope: else keyword")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveConditionFromLastElse
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove directive and related directives")]
        [Description("Syntax: preprocessor directive, region directive")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveDirectiveAndRelatedDirectives
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove empty lines")]
        [Description("Syntax: selected lines")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveEmptyLines
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove interpolation")]
        [Description("Syntax: string interpolation\r\nScope: opening or closing brace")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveInterpolation
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove member")]
        [Description("Syntax: method, constructor, property, indexer, operator, event, namespace, class, struct, interface\r\nScope: opening or closing brace")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveMember
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove member declarations above/below")]
        [Description("Syntax: empty line between member declarations")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveMemberDeclarations
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove parameter name from argument")]
        [Description("Syntax: selected argument(s)")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveParameterNameFromArgument
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove parentheses")]
        [Description("Syntax: parenthesized expression\r\nScope: opening or closing parenthesis")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveParentheses
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove property initializer")]
        [Description("Syntax: property initializer")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemovePropertyInitializer
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove region")]
        [Description("Syntax: region directive")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveRegion
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove statement")]
        [Description("Syntax: do statement, fixed statement, for statement, foreach statement, checked statement, if statement, lock statement, switch statement, try statement, unchecked statement, unsafe statement, using statement, while statement\r\nScope: open/close brace")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveStatement
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove statements from switch sections")]
        [Description("Syntax: selected switch sections")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveStatementsFromSwitchSections
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Remove using alias directive")]
        [Description("Syntax: using alias directive\r\nScope: identifier")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveUsingAliasDirective
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Rename backing field according to property name")]
        [Description("Syntax: field identifier inside property declaration")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RenameBackingFieldAccordingToPropertyName
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Rename identifier according to type name")]
        [Description("Syntax: foreach statement, local/field/constant declaration\r\nScope: identifier")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RenameIdentifierAccordingToTypeName
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Rename method according to type name")]
        [Description("Syntax: method")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RenameMethodAccordingToTypeName
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Rename parameter according to its type name")]
        [Description("Syntax: parameter\r\nScope: parameter identifier")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RenameParameterAccordingToTypeName
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Rename property according to type name")]
        [Description("Syntax: property identifier")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RenamePropertyAccordingToTypeName
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace anonymous method with lambda expression")]
        [Description("Syntax: anonymous method\r\nScope: delegate keyword")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceAnonymousMethodWithLambdaExpression
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace 'Any/All' with 'All/Any'")]
        [Description("Syntax: Any(Func<T, bool> or All(Func<T, bool> from System.Linq.Enumerable namespace\r\nScope: method name")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceAnyWithAllOrAllWithAny
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace as expression with cast expression")]
        [Description("Syntax: as expression\r\nScope: operator")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceAsWithCast
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace conditional expression with expression")]
        [Description("Syntax: conditional expression\r\nScope: selected true/false expression")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceConditionalExpressionWithExpression
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace conditional expression with if-else")]
        [Description("Syntax: conditional expression")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceConditionalExpressionWithIfElse
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace constant with field")]
        [Description("Syntax: constant declaration")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceConstantWithField
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace 'Count/Length' with 'Length/Count'")]
        [Description("Syntax: member access expression\r\nScope: name")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceCountWithLengthOrLengthWithCount
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace do statement with while statement")]
        [Description("Syntax: do statement\r\nScope: do keyword")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceDoStatementWithWhileStatement
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace \"\" with 'string.Empty'")]
        [Description("Syntax: empty string literal")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceEmptyStringLiteralWithStringEmpty
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace equals expression with string.Equals")]
        [Description("Syntax: equals expression, not equals expression\r\nScope: operator")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceEqualsExpressionWithStringEquals
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace equals expression with string.IsNullOrEmpty")]
        [Description("Syntax: equals expression, not equals expression\r\nScope: operator")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceEqualsExpressionWithStringIsNullOrEmpty
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace equals expression with string.IsNullOrWhiteSpace")]
        [Description("Syntax: equals expression, not equals expression\r\nScope: operator")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceEqualsExpressionWithStringIsNullOrWhiteSpace
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace field with constant")]
        [Description("Syntax: read-only field")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceFieldWithConstant
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace foreach statement with for statement")]
        [Description("Syntax: foreach statement")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceForEachWithFor
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace for statement with foreach statement")]
        [Description("Syntax: for statement")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceForWithForEach
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace 'HasFlag' with bitwise operation")]
        [Description("Syntax: Enum.HasFlag method invocation")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceHasFlagWithBitwiseOperation
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace if-else with conditional expression")]
        [Description("Syntax: conditional expression")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceIfElseWithConditionalExpression
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace if-else with switch statement")]
        [Description("Syntax: if statement")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceIfElseWithSwitch
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace increment operator with decrement operator")]
        [Description("Syntax: prefix/postfix unary expression")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceIncrementOperatorWithDecrementOperator
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace interpolated string with interpolation expression")]
        [Description("Syntax: interpolated string with single interpolation and no text\r\nScope: interpolation")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceInterpolatedStringWithInterpolationExpression
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace interpolated string with string literal")]
        [Description("Syntax: Interpolated string without any interpolation")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceInterpolatedStringWithStringLiteral
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace method invocation with '[]'")]
        [Description("Syntax: First/Last/ElementAt method invocation\r\nScope: method name")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceMethodInvocationWithElementAccess
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace method with property")]
        [Description("Syntax: method\r\nScope: method header")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceMethodWithProperty
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace prefix operator to postfix operator")]
        [Description("Syntax: prefix/postfix unary expression")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplacePrefixOperatorWithPostfixOperator
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace property with method")]
        [Description("Syntax: read-only property\r\nScope: property header")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplacePropertyWithMethod
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace regular string literal with verbatim string literal")]
        [Description("Syntax: regular string literal")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceRegularStringLiteralWithVerbatimStringLiteral
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace 'string.Empty' with \"\"")]
        [Description("Syntax: string.Empty")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceStringEmptyWithEmptyStringLiteral
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace 'string.Format' with interpolated string")]
        [Description("Syntax: string.Format method")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceStringFormatWithInterpolatedString
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace string literal with character literal")]
        [Description("Syntax: string literal")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceStringLiteralWithCharacterLiteral
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace switch statement with if-else")]
        [Description("Syntax: switch statement\r\nScope: switch keyword")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceSwitchWithIfElse
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace verbatim string literal with regular string literal")]
        [Description("Syntax: verbatim string literal")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceVerbatimStringLiteralWithRegularStringLiteral
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace verbatim string literal with regular string literals")]
        [Description("Syntax: multiline verbatim string literal")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceVerbatimStringLiteralWithRegularStringLiterals
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Replace while statement with do statement")]
        [Description("Syntax: while statement\r\nScope: while keyword")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceWhileStatementWithDoStatement
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Reverse for loop")]
        [Description("Syntax: for statement")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReverseForLoop
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Simplify lambda expression")]
        [Description("Syntax: lambda expression with block with single single-line statement\r\nScope: body")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool SimplifyLambdaExpression
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Split attributes")]
        [Description("Syntax: selected attribute list")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool SplitAttributes
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Split variable declaration")]
        [Description("Syntax: local declaration, field declaration, event field declaration")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool SplitVariableDeclaration
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Swap expressions in binary expression")]
        [Description("Syntax: logical and/or expression\r\nScope: binary operator")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool SwapExpressionsInBinaryExpression
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Swap expressions in conditional expression")]
        [Description("Syntax: conditional expression\r\nScope: condition")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool SwapExpressionsInConditionalExpression
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Swap member declarations")]
        [Description("Syntax: empty line between member declarations")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool SwapMemberDeclarations
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Swap statements in if-else")]
        [Description("Syntax: if statement\r\nScope: if keyword")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool SwapStatementsInIfElse
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Uncomment")]
        [Description("Syntax: single-line comment(s)")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool Uncomment
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Use expression-bodied member")]
        [Description("Syntax: method, property, indexer, operator\r\nScope: body or accessor list")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool UseExpressionBodiedMember
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Wrap in condition")]
        [Description("Syntax: selected statements")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool WrapInCondition
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Wrap in #if directive")]
        [Description("Syntax: selected lines")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool WrapInIfDirective
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Wrap in region")]
        [Description("Syntax: selected lines")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool WrapInRegion
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Wrap in try-catch")]
        [Description("Syntax: selected statements")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool WrapInTryCatch
        {
            get;
            set;
        }

        [Category(RefactoringCategory)]
        [DisplayName("Wrap in using statement")]
        [Description("Syntax: local declaration of type that implements IDisposable")]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool WrapInUsingStatement
        {
            get;
            set;
        }
    }
}