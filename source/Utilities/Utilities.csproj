<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <MinimumVisualStudioVersion>11.0</MinimumVisualStudioVersion>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{34A3E42E-2254-4EE7-A152-EEDB18E3D7E3}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Roslynator</RootNamespace>
    <AssemblyName>Roslynator.Utilities</AssemblyName>
    <ProjectTypeGuids>{786C830F-07A1-408B-BD7F-6EE04809D6DB};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <TargetFrameworkProfile>Profile7</TargetFrameworkProfile>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <CodeAnalysisRuleSet>..\..\Roslynator.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <CodeAnalysisRuleSet>..\..\Roslynator.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <PropertyGroup>
    <SignAssembly>true</SignAssembly>
  </PropertyGroup>
  <PropertyGroup>
    <AssemblyOriginatorKeyFile>Roslynator.Utilities.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="CSharp\Extensions\CSharpExtensions.cs" />
    <Compile Include="CSharp\Refactorings\ExtractTypeDeclarationToNewDocumentRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\IntroduceFieldToLockOnRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\RemoveUsingAliasDirective\RemoveUsingAliasDirectiveRefactoring.cs" />
    <Compile Include="CSharp\SwitchSectionContainer.cs" />
    <Compile Include="CSharp\AccessModifier.cs" />
    <Compile Include="CSharp\Analysis\AsyncAnalysis.cs" />
    <Compile Include="CSharp\Analysis\ForStatementAnalysis.cs" />
    <Compile Include="CSharp\Analysis\SwitchSectionAnalysisResult.cs" />
    <Compile Include="CSharp\Analysis\SwitchStatementAnalysis.cs" />
    <Compile Include="CSharp\Analysis\SwitchStatementAnalysisResult.cs" />
    <Compile Include="CommentRemoveOptions.cs" />
    <Compile Include="CSharp\CSharpFactory.cs" />
    <Compile Include="CSharp\DetermineParameterHelper.cs" />
    <Compile Include="CSharp\Analysis\ForEachStatementAnalysis.cs" />
    <Compile Include="CSharp\Analysis\IfElseAnalysis.cs" />
    <Compile Include="CSharp\Extensions\SyntaxExtensions.cs" />
    <Compile Include="CSharp\PropertyKind.cs" />
    <Compile Include="CSharp\Refactorings\AddConfigureAwaitRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\ReplaceAnonymousMethodWithLambdaExpressionRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\AddBracesToIfElseRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\ExpandAssignmentExpressionRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\SimplifyAssignmentExpressionRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\AttributeRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\ReplaceForEachWithForRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\ReplaceInterpolatedStringWithStringLiteralRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\DuplicateMemberDeclarationRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\RemoveBracesFromIfElseElseRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\ReplaceStringEmptyWithEmptyStringLiteralRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\SimplifyLambdaExpressionRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\SplitVariableDeclarationRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\UseExpressionBodiedMemberRefactoring.cs" />
    <Compile Include="CSharp\SyntaxRewriters\CommentRemover.cs" />
    <Compile Include="CSharp\Refactorings\RemoveUsingAliasDirective\RemoveUsingAliasDirectiveSyntaxRewriter.cs" />
    <Compile Include="CSharp\SyntaxRewriters\NameColonRemover.cs" />
    <Compile Include="CSharp\SyntaxRewriters\WhitespaceOrEndOfLineRemover.cs" />
    <Compile Include="CSharp\Analysis\TypeAnalysisResult.cs" />
    <Compile Include="CSharp\Refactorings\ChangeTypeRefactoring.cs" />
    <Compile Include="CSharp\Analysis\VariableDeclarationAnalysis.cs" />
    <Compile Include="CSharp\SyntaxRewriters\IdentifierNameSyntaxRewriter.cs" />
    <Compile Include="CSharp\SyntaxRemover.cs" />
    <Compile Include="Extensions\DiagnosticsExtensions.cs" />
    <Compile Include="Extensions\FileLinePositionSpanExtensions.cs" />
    <Compile Include="Extensions\ISymbolExtensions.cs" />
    <Compile Include="Extensions\TextSpanExtensions.cs" />
    <Compile Include="ModifierUtility.cs" />
    <Compile Include="CSharp\Modifiers.cs" />
    <Compile Include="SelectedLinesInfo.cs" />
    <Compile Include="SelectedStatementsInfo.cs" />
    <Compile Include="SelectedNodesInfo.cs" />
    <Compile Include="CSharp\BlockContainer.cs" />
    <Compile Include="CSharp\StatementContainer.cs" />
    <Compile Include="SymbolRenamer.cs" />
    <Compile Include="ModifierComparer.cs" />
    <Compile Include="Extensions\SymbolInfoExtensions.cs" />
    <Compile Include="Extensions\SyntaxNodeExtensions.cs" />
    <Compile Include="Extensions\SyntaxNodeOrTokenExtensions.cs" />
    <Compile Include="Extensions\SyntaxTokenExtensions.cs" />
    <Compile Include="Extensions\SyntaxTokenListExtensions.cs" />
    <Compile Include="Extensions\SyntaxTreeExtensions.cs" />
    <Compile Include="Extensions\SyntaxTriviaExtensions.cs" />
    <Compile Include="Extensions\SyntaxTriviaListExtensions.cs" />
    <Compile Include="CSharp\Analysis\EmbeddedStatementAnalysis.cs" />
    <Compile Include="GeneratedCodeAnalyzer.cs" />
    <Compile Include="IGeneratedCodeAnalyzer.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="CSharp\SyntaxRewriters\TriviaRemover.cs" />
    <Compile Include="Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <Compile Include="SyntaxUtility.cs" />
    <Compile Include="TextUtility.cs" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <None Include="app.config" />
    <None Include="packages.config">
      <SubType>Designer</SubType>
    </None>
    <None Include="Roslynator.Utilities.snk" />
    <None Include="Roslynator.Utilities.nuspec" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="Microsoft.CodeAnalysis, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\..\packages\Microsoft.CodeAnalysis.Common.1.0.0\lib\portable-net45+win8\Microsoft.CodeAnalysis.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.CodeAnalysis.CSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\..\packages\Microsoft.CodeAnalysis.CSharp.1.0.0\lib\portable-net45+win8\Microsoft.CodeAnalysis.CSharp.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.CodeAnalysis.CSharp.Workspaces, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\..\packages\Microsoft.CodeAnalysis.CSharp.Workspaces.1.0.0\lib\portable-net45+win8\Microsoft.CodeAnalysis.CSharp.Workspaces.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.CodeAnalysis.Workspaces, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\..\packages\Microsoft.CodeAnalysis.Workspaces.Common.1.0.0\lib\portable-net45+win8\Microsoft.CodeAnalysis.Workspaces.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Collections.Immutable, Version=1.1.36.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\..\packages\System.Collections.Immutable.1.1.36\lib\portable-net45+win8+wp8+wpa81\System.Collections.Immutable.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Composition.AttributedModel, Version=1.0.27.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.AttributedModel.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Composition.Convention, Version=1.0.27.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.Convention.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Composition.Hosting, Version=1.0.27.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.Hosting.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Composition.Runtime, Version=1.0.27.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.Runtime.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Composition.TypedParts, Version=1.0.27.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.TypedParts.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Reflection.Metadata, Version=1.0.21.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\..\packages\System.Reflection.Metadata.1.0.21\lib\portable-net45+win8\System.Reflection.Metadata.dll</HintPath>
      <Private>False</Private>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Analyzer Include="..\..\packages\CSharpAnalyzers.1.1.0\analyzers\dotnet\cs\Roslynator.CSharp.Analyzers.dll" />
    <Analyzer Include="..\..\packages\CSharpAnalyzers.1.1.0\analyzers\dotnet\cs\Roslynator.Utilities.dll" />
    <Analyzer Include="..\..\packages\Microsoft.CodeAnalysis.Analyzers.1.0.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.Analyzers.dll" />
    <Analyzer Include="..\..\packages\Microsoft.CodeAnalysis.Analyzers.1.0.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.Analyzers.dll" />
  </ItemGroup>
  <ItemGroup />
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\Portable\v4.6\Microsoft.Portable.CSharp.targets" />
  <Target Name="AfterBuild">
    <GetAssemblyIdentity AssemblyFiles="$(OutDir)\$(AssemblyName).dll">
      <Output TaskParameter="Assemblies" ItemName="AnalyzerAssemblyInfo" />
    </GetAssemblyIdentity>
  </Target>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>